#!/usr/bin/python

# Copyright (c) 2009 Pavol Rusnak <stick@gk2.sk>
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

import os
import re
import rpm
import platform
import httplib
import smtplib
import time

version             = '0.1'
popcorn_post_server = 'stats.opensuse.org'
popcorn_post_uri    = '/popcorn'
popcorn_email       = 'popcorn@stats.opensuse.org'

days_recent = 30
days_voted  = 30

pathre = '^/(bin|boot|lib|lib64|opt/gnome/bin|opt/gnome/sbin|opt/kde3/bin|opt/kde3/sbin|sbin|usr/bin|usr/games|usr/include|usr/lib|usr/lib64|usr/libexec|usr/sbin|usr/share)/'

system_mounts = ['binfmt_misc', 'debugfs', 'devpts', 'fuse.gvfs-fuse-daemon', 'fusectl', 'nfs', 'nfs4', 'proc', 'rootfs', 'rpc_pipefs', 'securityfs', 'sysfs']

class Statistics:
    arch = platform.machine()
    packages = []

    def fill_packages(self):
        pathreprg = re.compile(pathre)
        now = int(time.time())

        # detect mountpoints that are atime and noatime/relatime
        atime_mounts = []
        noatime_mounts = []
        try:
            f = open('/proc/mounts', 'r')
            for line in f:
                mount = line.split(' ', 4)
                if not mount[2] in system_mounts:
                    if mount[3].find('noatime') < 0 and mount[3].find('relatime') < 0:
                       atime_mounts.append(mount[1])
                    else:
                       noatime_mounts.append(mount[1])
            f.close()
        except:
            pass

        ts = rpm.TransactionSet()
        mi = ts.dbMatch()
        for h in mi:
            name = h[rpm.RPMTAG_NAME]
            if name == 'gpg-pubkey': continue
            installed = h[rpm.RPMTAG_INSTALLTIME]
            (accessed, atime) = (0, 0)
            if len(atime_mounts) > 0:
                for file in h[rpm.RPMTAG_FILENAMES]:
                    # skip non-watched files
                    if not pathreprg.match(file): continue
                    # if the file is mounted from noatime/relatime mountpoint, skip it
                    if len( [i for i in noatime_mounts if file.startswith(i)] ) >  0 and \
                       len( [i for i in   atime_mounts if file.startswith(i)] ) <= 0: continue
                    try:
                        (atime, ) = os.stat(file)[7:8]
                        if atime > accessed:
                            accessed = atime
                    except:
                        pass
            if accessed == 0:
                cat = 'n' # no-files
            else:
                if now - installed < days_recent * 86400:
                    cat = 'r' # recent
                else:
                    if now - accessed < days_voted * 86400:
                        cat = 'v' # voted
                    else:
                        cat ='o' # old
            self.packages.append( (cat, name) )

    def serialize(self):
        ret  = ''
        ret += 'POPCORN %s %s\n' % (version, self.arch)
        for pkg in self.packages:
            ret += '%s %s\n' % pkg
        return ret

class Client:
    def __init__(self):
        stats = Statistics()
        stats.fill_packages()
        self.data = stats.serialize()

    def post(self, compress = False):
        conn = httplib.HTTPConnection(popcorn_uri_server)
        conn.putrequest('POST', popcorn_post_uri)
        conn.putheader('content-type', 'text/plain')
        conn.putheader('content-length', str(len(self.data)))
        conn.endheaders()
        conn.send(self.data)

    def email(self):
        smtp = smtplib.SMTP()
        smtp.sendmail('', popcorn_email, self.data)
        smtp.quit()

    def write(self):
        print self.data,

client = Client()
# client.post()
# client.email()
client.write()
