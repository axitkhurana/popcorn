# -*- coding: utf-8 -*-
# Copyright (c) 2011 Ionuț Arțăriși <iartarisi@suse.cz>
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

from popcorn.configs import rdb
from popcorn.model.error import DoesNotExist
from popcorn.model import Submission
from distros import Distro

ARCHES = ['i586', 'x86_64']

class System(object):
    """A System is a user machine that we want to track.

    A system is identified by a smolt hw_uuid (generated by smolt and
    typically stored in /etc/smolt/hw-uuid). Ids are stored in the set
    'distro:%(distro)s:systems' and incremented in 'global:nextSystemId'.

    A hash is stored in 'system:%(hw_uuid)s' containing:
     - arch - the architecture of the system
     - distro - the id of the Distro object that this System belongs to
    """
    @classmethod
    def find(cls, system_id):
        try:
            hw_uuid = rdb['system:'+system_id]
        except KeyError:
            raise DoesNotExist("System", system_id)
        return System(hw_uuid)

    # XXX think about memoizing the objects in this class, so they don't
    # get created every time we need to look for one
    def __init__(self, hw_uuid, distroname=None, distrover=None, arch=None):
        """Check if the system is in our database and create it if it isn't

        :hw-uuid: smolt hw-uuid to uniquely indentify each system
        :arch: the architecture of the system. If this isn't given, then
        a new object can't be created and if the System with the given
        hw_uuid is not found a DoesNotExist exception is raised instead.

        """
        self.hw_uuid = hw_uuid

        key = 'system:%s' % hw_uuid
        try:
            self.id = rdb[key]
        except KeyError:
            if not arch or not distroname or not distrover:
                raise DoesNotExist('System', hw_uuid)
            self.id = str(rdb.incr('global:nextSystemId'))

            self.distro = Distro(distroname, distrover)
            self.distro.add_system(self.id)
            rdb[key] = self.id

            # XXX see if this constraint can go in the database,
            # otherwise just make it prettier
            assert arch in ARCHES
            rdb.hmset('system:%s' % self.id, {'arch': arch,
                                              'distro': self.distro.id,
                                              'hw_uuid': self.hw_uuid})
        else:
            self.arch, self.distro = rdb.hmget('system:%s' % self.id,
                                               ['arch', 'distro'])

    def __repr__(self):
        return "<System %s>" % self.hw_uuid

    def __str__(self):
        return self.hw_uuid

    @property
    def submissions(self):
        sub_ids = rdb.smembers('system:%s:submissions' % self.id)
        submissions = [Submission.find(sub_id) for sub_id in sub_ids]
        return submissions

    @property
    def last_submission(self):
        """Return the last(current) submission for this system"""
        ids = rdb.smembers('system:%s:submissions' % self.id)
        # the last submission should be the one with the highest id
        sub_id = max(ids)
        return Submission.find(sub_id)
